package main

import (
	"regexp"
	"strings"
	"syscall/js"
)

// type HTMLElement struct {
// 	tp js.Value
// }

// func NewHTMLElement(el string) HTMLElement{
// 	document := js.Global().Get("document")
// 	element := document.Call("createElement", el)
// 	n := HTMLElement {
// 		tp : element,
// 	}
// 	return n
// }

// func (e *HTMLElement) Init() {
// 	e.tp.Get("style").Set("borderColor", "red")
// }

// var	HTMLElement string

// // Créer un nouveau élément html
// func NewHTMLElement(el string) js.Value {
// 	document := js.Global().Get("document")
//     return document.Call("createElement", el)
// }

// // SetBorderColorRed applique la propriété CSS "borderColor" en rouge à l'élément.

// func Init(el js.Value) {
// 	el.Get("style").Set("borderColor", "red")
// }

// Création d'un directive

type PhoneNumberDirective struct {
	tp js.Value
}

func NewDirective(el js.Value) PhoneNumberDirective {
	n := PhoneNumberDirective{
		tp: el,
	}
	return n
}

func (d *PhoneNumberDirective) Init() {
	input := d.tp
	val := ""
	input.Get("style").Set("borderColor", "red")

	input.Call("addEventListener", "input", js.FuncOf(func(this js.Value, p []js.Value) interface{} {
		val = input.Get("value").String()
		input.Set("value", FormatNumber(NumberVerify(val)))
		//js.Global().Get("console").Call("log", val)
		return nil
	}))
}

func NumberVerify(s string) string {
	s = strings.Join(strings.Split(s, " "), "")
	if len(s) > 10 {
		s = s[:10]
	}
	regex := regexp.MustCompile(`^\d+\s*$`)
	match := regex.MatchString(s)
	if match {
		return s
	}
	return s[:len(s)-1]
}

func FormatNumber(s string) string {
	r := ""
	for i, v := range s {
		if i != 0 && i%2 != 0 && i != len(s)-1 {
			r += string(v) + " "
		} else {
			r += string(v)
		}
	}
	return r
}
